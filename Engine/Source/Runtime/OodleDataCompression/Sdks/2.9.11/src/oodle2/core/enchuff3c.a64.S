// Copyright Epic Games, Inc. All Rights Reserved.
// This source file is licensed solely to users who have
// accepted a valid Unreal Engine license agreement 
// (see e.g., https://www.unrealengine.com/eula), and use
// of this source file is governed by such agreement.

// This file was generated by sketchy. DO NOT EDIT!
// Scheduling model: Cortex-A53
// vim:ts=4

#include "asmlib_arm_a64.inc"

		.text
		.globl MANGLE(oodle_enchuff3c_a64_kern)
		.align 4
		FUNCTION_PRE_DECL(oodle_enchuff3c_a64_kern)
MANGLE(oodle_enchuff3c_a64_kern):
		.cfi_startproc
.L0:
		ldp		w8, w14, [x0, #72]						// leftoverc0/leftoverc1
		ldp		x1, x2, [x0]							// inptr/inend
		mov		x4, #7
		ldp		x7, x13, [x0, #48]						// leftoverb0/leftoverb1
		mov		x5, #56
		ldp		x3, x9, [x0, #16]						// codelenptr/bitp0
		sub		x2, x2, #16								// inend-=16
		stp		x19, x20, [sp, #-64]!
		ldr		x20, [x0, #64]							// leftoverb2
		stp		x21, x22, [sp, #16]
		ldr		w21, [x0, #80]							// leftoverc2
		ldp		x15, x22, [x0, #32]						// bitp1/bitp2
		stp		x23, x24, [sp, #32]
		mov		x23, #1
		lslv	x10, x23, x8
		orr		x6, x7, x10
		mov		x10, #0
		lslv	x16, x23, x14
		lslv	x23, x23, x21
		orr		x12, x13, x16
		mov		x16, #0
		orr		x19, x20, x23
		mov		x23, #0
		stp		x25, x26, [sp, #48]
		.align	4
.L2: // Main loop
		ldp		x25, x26, [x1]							// bytes[0]/bytes[1]
		lsrv	x13, x12, x16							// strm1 leftover bits
		sub		x15, x15, x16, lsr #3					// strm1 advance
		lsrv	x7, x6, x10								// strm0 leftover bits
		add		x9, x9, x10, lsr #3						// strm0 advance
		lsrv	x20, x19, x23							// strm2 leftover bits
		ubfm	x17, x26, #40, #47						// in sym 13
		ubfm	x11, x26, #32, #39						// in sym 12
		ubfm	x24, x26, #48, #55						// in sym 14
		add		x22, x22, x23, lsr #3					// strm2 advance
		add		x1, x1, #15								// inptr+=15
		subs	xzr, x1, x2								// inptr <= inend?
		ldr		w16, [x3, x17, lsl #2]					// code/len 13
		ubfm	x17, x26, #16, #23						// in sym 10
		ldr		w10, [x3, x11, lsl #2]					// code/len 12
		ubfm	x11, x26, #8, #15						// in sym 9
		ldr		w23, [x3, x24, lsl #2]					// code/len 14
		ubfm	x24, x26, #24, #31						// in sym 11
		ubfm	x12, x16, #8, #63						// code 13
		ldr		w16, [x3, x17, lsl #2]					// code/len 10
		ubfm	x17, x25, #56, #63						// in sym 7
		ubfm	x6, x10, #8, #63						// code 12
		ldr		w10, [x3, x11, lsl #2]					// code/len 9
		ubfm	x19, x23, #8, #63						// code 14
		ldr		w23, [x3, x24, lsl #2]					// code/len 11
		ubfm	x11, x25, #48, #55						// in sym 6
		and		x24, x26, #255							// in sym 8
		lslv	x12, x12, x16							// make space 10
		add		x12, x12, x16, lsr #8					// insert 10
		ldr		w16, [x3, x17, lsl #2]					// code/len 7
		ubfm	x17, x25, #32, #39						// in sym 4
		lslv	x6, x6, x10								// make space 9
		add		x6, x6, x10, lsr #8						// insert 9
		ldr		w10, [x3, x11, lsl #2]					// code/len 6
		lslv	x19, x19, x23							// make space 11
		add		x19, x19, x23, lsr #8					// insert 11
		ldr		w23, [x3, x24, lsl #2]					// code/len 8
		ubfm	x11, x25, #24, #31						// in sym 3
		ubfm	x24, x25, #40, #47						// in sym 5
		lslv	x12, x12, x16							// make space 7
		add		x12, x12, x16, lsr #8					// insert 7
		ldr		w16, [x3, x17, lsl #2]					// code/len 4
		ubfm	x17, x25, #8, #15						// in sym 1
		lslv	x6, x6, x10								// make space 6
		add		x6, x6, x10, lsr #8						// insert 6
		ldr		w10, [x3, x11, lsl #2]					// code/len 3
		lslv	x19, x19, x23							// make space 8
		add		x19, x19, x23, lsr #8					// insert 8
		ldr		w23, [x3, x24, lsl #2]					// code/len 5
		ubfm	x24, x25, #16, #23						// in sym 2
		and		x11, x25, #255							// in sym 0
		lslv	x12, x12, x16							// make space 4
		add		x12, x12, x16, lsr #8					// insert 4
		ldr		w16, [x3, x17, lsl #2]					// code/len 1
		lslv	x6, x6, x10								// make space 3
		add		x6, x6, x10, lsr #8						// insert 3
		ldr		w10, [x3, x11, lsl #2]					// code/len 0
		lslv	x19, x19, x23							// make space 5
		add		x19, x19, x23, lsr #8					// insert 5
		ldr		w23, [x3, x24, lsl #2]					// code/len 2
		lslv	x12, x12, x16							// make space 1
		add		x12, x12, x16, lsr #8					// insert 1
		lslv	x6, x6, x10								// make space 0
		add		x6, x6, x10, lsr #8						// insert 0
		lslv	x19, x19, x23							// make space 2
		add		x19, x19, x23, lsr #8					// insert 2
		lslv	x12, x12, x14							// strm1 leftover space
		add		x12, x12, x13							// strm1 leftover insert
		rev		x16, x12								// strm1 LE->BE
		str		x16, [x15, #-8]							// strm1 store
		clz		x16, x12								// strm1 bit count
		lslv	x6, x6, x8								// strm0 leftover space
		add		x6, x6, x7								// strm0 leftover insert
		clz		x10, x6									// strm0 bit count
		lslv	x19, x19, x21							// strm2 leftover space
		add		x19, x19, x20							// strm2 leftover insert
		clz		x23, x19								// strm2 bit count
		bic		x14, x4, x16							// strm1 leftover cnt
		bic		x16, x5, x16							// strm1 emit cnt
		bic		x8, x4, x10								// strm0 leftover cnt
		bic		x10, x5, x10							// strm0 emit cnt
		bic		x21, x4, x23							// strm2 leftover cnt
		bic		x23, x5, x23							// strm2 emit cnt
		str		x6, [x9]								// strm0 store
		str		x19, [x22]								// strm2 store
		b.ls	.L2										// -> Main loop
.L1: // Exit
		ldp		x25, x26, [sp, #48]
		mov		x4, #1
		lsrv	x7, x6, x10								// strm0 leftover bits
		add		x9, x9, x10, lsr #3						// strm0 advance
		lslv	x10, x4, x8
		sub		x15, x15, x16, lsr #3					// strm1 advance
		lsrv	x13, x12, x16							// strm1 leftover bits
		add		x22, x22, x23, lsr #3					// strm2 advance
		lslv	x16, x4, x14
		bic		x7, x7, x10
		lsrv	x20, x19, x23							// strm2 leftover bits
		bic		x13, x13, x16
		lslv	x23, x4, x21
		bic		x20, x20, x23
		ldp		x23, x24, [sp, #32]
		str		x1, [x0]								// inptr
		stp		x9, x15, [x0, #24]						// bitp0/bitp1
		stp		x22, x7, [x0, #40]						// bitp2/leftoverb0
		stp		x13, x20, [x0, #56]						// leftoverb1/leftoverb2
		stp		w8, w14, [x0, #72]						// leftoverc0/leftoverc1
		str		w21, [x0, #80]							// leftoverc2
		ldp		x21, x22, [sp, #16]
		ldp		x19, x20, [sp], #64
		ret		
		FUNCTION_POST_DECL(oodle_enchuff3c_a64_kern)
		.cfi_endproc
