// Copyright Epic Games, Inc. All Rights Reserved.
// This source file is licensed solely to users who have
// accepted a valid Unreal Engine license agreement 
// (see e.g., https://www.unrealengine.com/eula), and use
// of this source file is governed by such agreement.

// This file was generated by sketchy. DO NOT EDIT!
// Scheduling model: Cortex-A57
// vim:ts=4

#include "asmlib_arm_a64.inc"

		.text
		.globl MANGLE(oodle_newLZ_huff6_a64_kern)
		.align 4
		FUNCTION_PRE_DECL(oodle_newLZ_huff6_a64_kern)
MANGLE(oodle_newLZ_huff6_a64_kern):
		.cfi_startproc
.L0:
		ldp		x2, x5, [x0, #48]
		stp		x19, x20, [sp, #-64]!
		ldp		x8, x11, [x0, #64]
		stp		x21, x22, [sp, #16]
		mov		x22, #0
		ldp		x14, x17, [x0, #80]
		stp		x23, x24, [sp, #32]
		mov		x24, #0
		ldp		x21, x23, [x0]
		str		x25, [sp, #48]
		mov		x3, #0
		ldr		x25, [x0, #24]
		mov		x6, #0
		mov		x9, #0
		sub		x7, x5, x8								// in1 - in2
		mov		x12, #0
		sub		x10, x14, x17							// in4 - in5
		mov		x15, #0
		mov		x19, #0
		sub		x25, x25, x23							// nbytesleft = decend1 - decptr[1]
		subs	xzr, x25, #15
		b.ls	.L1										// -> return true
.L4:
		subs	xzr, x7, #8
		b.ls	.L1										// -> return true
.L5:
		subs	xzr, x10, #8
		b.ls	.L1										// -> return true
.L6:
		sub		x25, x25, #15
		sub		x5, x5, #8
		sub		x14, x14, #8
		sub		x21, x21, #3
		sub		x23, x23, #3
		.align	4
.L7: // Main decode loop body
		ldr		x7, [x5]								// refill 1 load
		and		x9, x9, #7								// refill 2 leftover bits
		and		x3, x3, #7								// refill 0 leftover bits
		ldr		x10, [x8]								// refill 2 load
		and		x6, x6, #7								// refill 1 leftover bits
		and		x19, x19, #7							// refill 5 leftover bits
		ldr		x4, [x2]								// refill 0 load
		and		x12, x12, #7							// refill 3 leftover bits
		and		x15, x15, #7							// refill 4 leftover bits
		ldr		x16, [x14]								// refill 4 load
		subs	x25, x25, #15							// (nbytesleft -= TRIPLE_DECS_PER_REFILL) > 0
		ldr		x20, [x17]								// refill 5 load
		rev		x7, x7									// refill 1 LE->BE
		ldr		x13, [x11]								// refill 3 load
		orr		x10, x10, #0x8000000000000000			// refill 2 mark
		orr		x7, x7, #0x8000000000000000				// refill 1 mark
		lsrv	x9, x10, x9								// refill 2 consume leftover
		orr		x4, x4, #0x8000000000000000				// refill 0 mark
		prfum	#1, [x2, #39]							// refill 0 prefetch
		lsrv	x6, x7, x6								// refill 1 consume leftover
		lsrv	x3, x4, x3								// refill 0 consume leftover
		prfum	#1, [x8, #39]							// refill 2 prefetch
		rev		x16, x16								// refill 4 LE->BE
		orr		x20, x20, #0x8000000000000000			// refill 5 mark
		prfum	#1, [x5, #-32]							// refill 1 prefetch
		ubfm	x10, x9, #63, #10						// decode 2 tab addr
		orr		x16, x16, #0x8000000000000000			// refill 4 mark
		prfum	#1, [x11, #39]							// refill 3 prefetch
		ldrh	w10, [x1, x10]							// decode 2 LUT
		lsrv	x19, x20, x19							// refill 5 consume leftover
		ubfm	x7, x6, #63, #10						// decode 1 tab addr
		ldrh	w7, [x1, x7]							// decode 1 LUT
		orr		x13, x13, #0x8000000000000000			// refill 3 mark
		ubfm	x4, x3, #63, #10						// decode 0 tab addr
		ldrh	w4, [x1, x4]							// decode 0 LUT
		lsrv	x15, x16, x15							// refill 4 consume leftover
		lsrv	x12, x13, x12							// refill 3 consume leftover
		ubfm	x20, x19, #63, #10						// decode 5 tab addr
		ubfm	x16, x15, #63, #10						// decode 4 tab addr
		prfum	#1, [x17, #39]							// refill 5 prefetch
		ldrh	w20, [x1, x20]							// decode 5 LUT
		ubfm	x13, x12, #63, #10						// decode 3 tab addr
		lsrv	x9, x9, x10								// decode 2 consume
		ldrh	w16, [x1, x16]							// decode 4 LUT
		rev32	x22, x10								// out 0 byte 2
		ubfm	x10, x9, #63, #10						// decode 2 tab addr
		ldrh	w13, [x1, x13]							// decode 3 LUT
		orr		x22, x22, x7							// out 0 byte 1
		lsrv	x6, x6, x7								// decode 1 consume
		ldrh	w10, [x1, x10]							// decode 2 LUT
		lsrv	x3, x3, x4								// decode 0 consume
		bfm		x22, x4, #8, #15						// out 0 byte 0
		ubfm	x7, x6, #63, #10						// decode 1 tab addr
		ubfm	x4, x3, #63, #10						// decode 0 tab addr
		prfum	#1, [x14, #-32]							// refill 4 prefetch
		ldrh	w7, [x1, x7]							// decode 1 LUT
		lsrv	x19, x19, x20							// decode 5 consume
		rev32	x24, x20								// out 1 byte 2
		ldrh	w4, [x1, x4]							// decode 0 LUT
		orr		x24, x24, x16							// out 1 byte 1
		ubfm	x20, x19, #63, #10						// decode 5 tab addr
		ldrh	w20, [x1, x20]							// decode 5 LUT
		lsrv	x15, x15, x16							// decode 4 consume
		lsrv	x12, x12, x13							// decode 3 consume
		bfm		x24, x13, #8, #15						// out 1 byte 0
		ubfm	x16, x15, #63, #10						// decode 4 tab addr
		ubfm	x13, x12, #63, #10						// decode 3 tab addr
		ldrh	w16, [x1, x16]							// decode 4 LUT
		lsrv	x9, x9, x10								// decode 2 consume
		str		w22, [x21, #3]							// out 0 emit
		ldrh	w13, [x1, x13]							// decode 3 LUT
		rev32	x22, x10								// out 0 byte 2
		ubfm	x10, x9, #63, #10						// decode 2 tab addr
		ldrh	w10, [x1, x10]							// decode 2 LUT
		lsrv	x6, x6, x7								// decode 1 consume
		orr		x22, x22, x7							// out 0 byte 1
		lsrv	x3, x3, x4								// decode 0 consume
		ubfm	x7, x6, #63, #10						// decode 1 tab addr
		bfm		x22, x4, #8, #15						// out 0 byte 0
		ldrh	w7, [x1, x7]							// decode 1 LUT
		ubfm	x4, x3, #63, #10						// decode 0 tab addr
		lsrv	x19, x19, x20							// decode 5 consume
		ldrh	w4, [x1, x4]							// decode 0 LUT
		str		w24, [x23, #3]							// out 1 emit
		rev32	x24, x20								// out 1 byte 2
		ubfm	x20, x19, #63, #10						// decode 5 tab addr
		lsrv	x15, x15, x16							// decode 4 consume
		str		w22, [x21, #6]							// out 0 emit
		ldrh	w20, [x1, x20]							// decode 5 LUT
		orr		x24, x24, x16							// out 1 byte 1
		lsrv	x12, x12, x13							// decode 3 consume
		ubfm	x16, x15, #63, #10						// decode 4 tab addr
		bfm		x24, x13, #8, #15						// out 1 byte 0
		ubfm	x13, x12, #63, #10						// decode 3 tab addr
		ldrh	w13, [x1, x13]							// decode 3 LUT
		rev32	x22, x10								// out 0 byte 2
		lsrv	x9, x9, x10								// decode 2 consume
		ldrh	w16, [x1, x16]							// decode 4 LUT
		lsrv	x3, x3, x4								// decode 0 consume
		orr		x22, x22, x7							// out 0 byte 1
		lsrv	x6, x6, x7								// decode 1 consume
		ubfm	x10, x9, #63, #10						// decode 2 tab addr
		bfm		x22, x4, #8, #15						// out 0 byte 0
		ldrh	w10, [x1, x10]							// decode 2 LUT
		ubfm	x4, x3, #63, #10						// decode 0 tab addr
		ubfm	x7, x6, #63, #10						// decode 1 tab addr
		ldrh	w4, [x1, x4]							// decode 0 LUT
		str		w24, [x23, #6]							// out 1 emit
		rev32	x24, x20								// out 1 byte 2
		ldrh	w7, [x1, x7]							// decode 1 LUT
		lsrv	x19, x19, x20							// decode 5 consume
		lsrv	x12, x12, x13							// decode 3 consume
		orr		x24, x24, x16							// out 1 byte 1
		lsrv	x15, x15, x16							// decode 4 consume
		str		w22, [x21, #9]							// out 0 emit
		ubfm	x20, x19, #63, #10						// decode 5 tab addr
		bfm		x24, x13, #8, #15						// out 1 byte 0
		ubfm	x13, x12, #63, #10						// decode 3 tab addr
		ldrh	w20, [x1, x20]							// decode 5 LUT
		ubfm	x16, x15, #63, #10						// decode 4 tab addr
		rev32	x22, x10								// out 0 byte 2
		ldrh	w13, [x1, x13]							// decode 3 LUT
		lsrv	x3, x3, x4								// decode 0 consume
		orr		x22, x22, x7							// out 0 byte 1
		ldrh	w16, [x1, x16]							// decode 4 LUT
		lsrv	x9, x9, x10								// decode 2 consume
		bfm		x22, x4, #8, #15						// out 0 byte 0
		ubfm	x4, x3, #63, #10						// decode 0 tab addr
		str		w24, [x23, #9]							// out 1 emit
		lsrv	x6, x6, x7								// decode 1 consume
		ldrh	w4, [x1, x4]							// decode 0 LUT
		rev32	x24, x20								// out 1 byte 2
		ubfm	x10, x9, #63, #10						// decode 2 tab addr
		ldrh	w10, [x1, x10]							// decode 2 LUT
		lsrv	x12, x12, x13							// decode 3 consume
		ubfm	x7, x6, #63, #10						// decode 1 tab addr
		ldrh	w7, [x1, x7]							// decode 1 LUT
		orr		x24, x24, x16							// out 1 byte 1
		lsrv	x19, x19, x20							// decode 5 consume
		bfm		x24, x13, #8, #15						// out 1 byte 0
		ubfm	x13, x12, #63, #10						// decode 3 tab addr
		lsrv	x15, x15, x16							// decode 4 consume
		ldrh	w13, [x1, x13]							// decode 3 LUT
		ubfm	x20, x19, #63, #10						// decode 5 tab addr
		ubfm	x16, x15, #63, #10						// decode 4 tab addr
		ldrh	w20, [x1, x20]							// decode 5 LUT
		clz		x3, x3									// decode 0 pre-final consume count
		clz		x9, x9									// decode 2 pre-final consume count
		ldrh	w16, [x1, x16]							// decode 4 LUT
		add		x3, x3, w4, uxtb #0						// decode 0 final consume count
		add		x9, x9, w10, uxtb #0					// decode 2 final consume count
		clz		x6, x6									// decode 1 pre-final consume count
		clz		x12, x12								// decode 3 pre-final consume count
		str		w22, [x21, #12]							// out 0 emit
		add		x6, x6, w7, uxtb #0						// decode 1 final consume count
		clz		x19, x19								// decode 5 pre-final consume count
		add		x2, x2, x3, lsr #3						// advance 0
		add		x12, x12, w13, uxtb #0					// decode 3 final consume count
		add		x8, x8, x9, lsr #3						// advance 2
		clz		x15, x15								// decode 4 pre-final consume count
		add		x19, x19, w20, uxtb #0					// decode 5 final consume count
		sub		x5, x5, x6, lsr #3						// advance 1
		str		w24, [x23, #12]							// out 1 emit
		rev32	x22, x10								// out 0 byte 2
		rev32	x24, x20								// out 1 byte 2
		add		x15, x15, w16, uxtb #0					// decode 4 final consume count
		ccmp	x2, x8, #2, gt							// && in0 <= in2
		add		x11, x11, x12, lsr #3					// advance 3
		orr		x22, x22, x7							// out 0 byte 1
		orr		x24, x24, x16							// out 1 byte 1
		add		x17, x17, x19, lsr #3					// advance 5
		ccmp	x8, x5, #2, ls							// && in2 <= in1
		bfm		x22, x4, #8, #15						// out 0 byte 0
		bfm		x24, x13, #8, #15						// out 1 byte 0
		sub		x14, x14, x15, lsr #3					// advance 4
		ccmp	x11, x17, #2, ls						// && in3 <= in5
		str		w22, [x21, #15]!						// out 0 emit
		ccmp	x17, x14, #2, ls						// && in5 <= in4
		str		w24, [x23, #15]!						// out 1 emit
		b.ls	.L7										// -> Main decode loop body
.L8: // Post-decode
		add		x21, x21, #3
		add		x23, x23, #3
		stp		x21, x23, [x0]
		add		x5, x5, #8
		add		x14, x14, #8
		and		x3, x3, #7
		and		x6, x6, #7
		and		x9, x9, #7
		and		x12, x12, #7
		and		x15, x15, #7
		and		x19, x19, #7
		subs	xzr, x2, x8
		b.hi	.L3										// -> return false
.L9:
		subs	xzr, x8, x5
		b.hi	.L3										// -> return false
.L10:
		subs	xzr, x11, x17
		b.hi	.L3										// -> return false
.L11:
		subs	xzr, x17, x14
		b.hi	.L3										// -> return false
.L12:
		subs	xzr, x5, x8
		ccmn	x6, x9, #4, eq							// inptr[1] == inptr[2] && (bits[1] + bits[2]) != 0?
		b.ne	.L3										// -> return false
.L13:
		subs	xzr, x14, x17
		ccmn	x15, x19, #4, eq						// inptr[4] == inptr[5] && (bits[4] + bits[5]) != 0?
		b.ne	.L3										// -> return false
.L14: // Finish stream 0
		cbz		x3, .L15								// -> Finish stream 1
.L16:
		ldrb	w4, [x2], #1
		mov		x7, #8
		sub		x7, x7, x3
		lsrv	x4, x4, x3
		str		w4, [x0, #96]
		str		w7, [x0, #120]
.L15: // Finish stream 1
		str		x2, [x0, #48]
		cbz		x6, .L17								// -> Finish stream 2
.L18:
		ldrb	w4, [x5, #-1]!
		mov		x7, #8
		sub		x7, x7, x6
		lsrv	x4, x4, x6
		str		w4, [x0, #100]
		str		w7, [x0, #124]
.L17: // Finish stream 2
		str		x5, [x0, #56]
		cbz		x9, .L19								// -> Finish stream 3
.L20:
		ldrb	w4, [x8], #1
		mov		x7, #8
		sub		x7, x7, x9
		lsrv	x4, x4, x9
		str		w4, [x0, #104]
		str		w7, [x0, #128]
.L19: // Finish stream 3
		str		x8, [x0, #64]
		cbz		x12, .L21								// -> Finish stream 4
.L22:
		ldrb	w4, [x11], #1
		mov		x7, #8
		sub		x7, x7, x12
		lsrv	x4, x4, x12
		str		w4, [x0, #108]
		str		w7, [x0, #132]
.L21: // Finish stream 4
		str		x11, [x0, #72]
		cbz		x15, .L23								// -> Finish stream 5
.L24:
		ldrb	w4, [x14, #-1]!
		mov		x7, #8
		sub		x7, x7, x15
		lsrv	x4, x4, x15
		str		w4, [x0, #112]
		str		w7, [x0, #136]
.L23: // Finish stream 5
		str		x14, [x0, #80]
		cbz		x19, .L25
.L26:
		ldrb	w4, [x17], #1
		mov		x7, #8
		sub		x7, x7, x19
		lsrv	x4, x4, x19
		str		w4, [x0, #116]
		str		w7, [x0, #140]
.L25:
		str		x17, [x0, #88]
.L1: // return true
		mov		x0, #1									// return val=true
.L2: // exit
		ldr		x25, [sp, #48]
		ldp		x23, x24, [sp, #32]
		ldp		x21, x22, [sp, #16]
		ldp		x19, x20, [sp], #64
		ret		
.L3: // return false
		mov		x0, #0									// return val=false
		b		.L2										// -> exit
		FUNCTION_POST_DECL(oodle_newLZ_huff6_a64_kern)
		.cfi_endproc
