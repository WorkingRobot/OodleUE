// Copyright Epic Games, Inc. All Rights Reserved.
// This source file is licensed solely to users who have
// accepted a valid Unreal Engine license agreement 
// (see e.g., https://www.unrealengine.com/eula), and use
// of this source file is governed by such agreement.

// This file was generated by sketchy. DO NOT EDIT!
// Scheduling model: Cortex-A53
// vim:ts=4

#include "asmlib_arm_a64.inc"

		.text
		.globl MANGLE(oodle_histo_a64_kern)
		.align 4
		FUNCTION_PRE_DECL(oodle_histo_a64_kern)
MANGLE(oodle_histo_a64_kern):
		.cfi_startproc
.L0:
		stp		x19, x20, [sp, #-16]!
		add		x5, x2, #1024
		add		x6, x2, #0x800
		add		x7, x2, #0xc00
		subs	x1, x1, #24								// bulk loop count
		b.ls	.L1										// bail if short
.L3:
		ldr		x3, [x0]								// preload bytes0
		add		x1, x0, x1								// rawEndBulk
		.align	4
.L4: // Main loop
		ldr		x4, [x0, #8]							// preload bytes1
		and		x8, x3, #255							// bytes0[0]
		ubfm	x9, x3, #8, #15							// bytes0[1]
		ubfm	x10, x3, #16, #23						// bytes0[2]
		subs	xzr, x3, x4
		ubfm	x11, x3, #24, #31						// bytes0[3]
		b.eq	.L2										// -> Bytes0 and 1 same
.L5:
		ldr		w16, [x2, x8, lsl #2]
		ubfm	x12, x3, #32, #39						// bytes0[4]
		ldr		w17, [x5, x9, lsl #2]
		ubfm	x13, x3, #40, #47						// bytes0[5]
		ldr		w19, [x6, x10, lsl #2]
		add		w16, w16, #1
		ldr		w20, [x7, x11, lsl #2]
		add		w17, w17, #1
		str		w16, [x2, x8, lsl #2]
		add		w19, w19, #1
		str		w17, [x5, x9, lsl #2]
		add		w20, w20, #1
		str		w19, [x6, x10, lsl #2]
		ubfm	x14, x3, #48, #55						// bytes0[6]
		ldr		w16, [x2, x12, lsl #2]
		ubfm	x15, x3, #56, #63						// bytes0[7]
		ldr		w17, [x5, x13, lsl #2]
		ubfm	x9, x4, #8, #15							// bytes1[1]
		ldr		w19, [x6, x14, lsl #2]
		add		w16, w16, #1
		ldr		x3, [x0, #16]!							// preload bytes0
		add		w17, w17, #1
		str		w20, [x7, x11, lsl #2]
		add		w19, w19, #1
		str		w16, [x2, x12, lsl #2]
		ubfm	x10, x4, #16, #23						// bytes1[2]
		str		w17, [x5, x13, lsl #2]
		ubfm	x11, x4, #24, #31						// bytes1[3]
		ldr		w20, [x7, x15, lsl #2]
		and		x8, x4, #255							// bytes1[0]
		str		w19, [x6, x14, lsl #2]
		ubfm	x12, x4, #32, #39						// bytes1[4]
		ldr		w16, [x2, x8, lsl #2]
		add		w20, w20, #1
		ldr		w17, [x5, x9, lsl #2]
		ubfm	x13, x4, #40, #47						// bytes1[5]
		ldr		w19, [x6, x10, lsl #2]
		add		w16, w16, #1
		str		w20, [x7, x15, lsl #2]
		add		w17, w17, #1
		str		w16, [x2, x8, lsl #2]
		add		w19, w19, #1
		str		w17, [x5, x9, lsl #2]
		ubfm	x14, x4, #48, #55						// bytes1[6]
		ldr		w20, [x7, x11, lsl #2]
		ubfm	x15, x4, #56, #63						// bytes1[7]
		ldr		w16, [x2, x12, lsl #2]
		subs	xzr, x0, x1								// rawPtr < rawEndBulk?
		ldr		w17, [x5, x13, lsl #2]
		add		w20, w20, #1
		str		w19, [x6, x10, lsl #2]
		add		w16, w16, #1
		str		w20, [x7, x11, lsl #2]
		add		w17, w17, #1
		str		w16, [x2, x12, lsl #2]
		ldr		w19, [x6, x14, lsl #2]
		ldr		w20, [x7, x15, lsl #2]
		str		w17, [x5, x13, lsl #2]
		add		w19, w19, #1
		str		w19, [x6, x14, lsl #2]
		add		w20, w20, #1
		str		w20, [x7, x15, lsl #2]
		b.cc	.L4										// -> Main loop
.L1: // Exit
		ldp		x19, x20, [sp], #16
		ret		
.L2: // Bytes0 and 1 same
		ldr		x3, [x0, #16]!							// preload bytes0
		eor		x16, x4, x4, lsl #8						// test for identical bytes
		subs	xzr, x16, #255
		b.ls	.L6										// -> All one byte
.L7:
		ldr		w16, [x2, x8, lsl #2]
		ubfm	x12, x4, #32, #39						// bytes1[4]
		ldr		w17, [x5, x9, lsl #2]
		ubfm	x13, x4, #40, #47						// bytes1[5]
		ldr		w19, [x6, x10, lsl #2]
		add		w16, w16, #2
		ldr		w20, [x7, x11, lsl #2]
		add		w17, w17, #2
		str		w16, [x2, x8, lsl #2]
		add		w19, w19, #2
		str		w17, [x5, x9, lsl #2]
		add		w20, w20, #2
		str		w19, [x6, x10, lsl #2]
		ubfm	x14, x4, #48, #55						// bytes1[6]
		ldr		w16, [x2, x12, lsl #2]
		ubfm	x15, x4, #56, #63						// bytes1[7]
		ldr		w17, [x5, x13, lsl #2]
		subs	xzr, x0, x1
		ldr		w19, [x6, x14, lsl #2]
		add		w16, w16, #2
		str		w20, [x7, x11, lsl #2]
		add		w17, w17, #2
		str		w16, [x2, x12, lsl #2]
		add		w19, w19, #2
		str		w17, [x5, x13, lsl #2]
		ldr		w20, [x7, x15, lsl #2]
		str		w19, [x6, x14, lsl #2]
		add		w20, w20, #2
		str		w20, [x7, x15, lsl #2]
		b.cc	.L4										// -> Main loop
.L8:
		b		.L1										// -> Exit
.L6: // All one byte
		ldr		w9, [x2, x8, lsl #2]
		subs	xzr, x0, x1
		add		w9, w9, #16
		str		w9, [x2, x8, lsl #2]
		b.cc	.L4										// -> Main loop
.L9:
		b		.L1										// -> Exit
		FUNCTION_POST_DECL(oodle_histo_a64_kern)
		.cfi_endproc
