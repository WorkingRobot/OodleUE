// Copyright Epic Games, Inc. All Rights Reserved.
// This source file is licensed solely to users who have
// accepted a valid Unreal Engine license agreement 
// (see e.g., https://www.unrealengine.com/eula), and use
// of this source file is governed by such agreement.

// This file was generated by sketchy. DO NOT EDIT!
// Scheduling model: Cortex-A78
// vim:ts=4

#include "asmlib_arm_a64.inc"

		.text
		.globl MANGLE(oodle_newLZ_huff3_a64_kern)
		.align 4
		FUNCTION_PRE_DECL(oodle_newLZ_huff3_a64_kern)
MANGLE(oodle_newLZ_huff3_a64_kern):
		.cfi_startproc
.L0:
		ldr		x12, [x0]
		ldr		x15, [x0, #16]
		ldp		x3, x6, [x0, #48]
		mov		x4, #0
		mov		x5, #0
		mov		x7, #0
		ldr		x9, [x0, #64]
		mov		x8, #0
		mov		x10, #0
		mov		x11, #0
		sub		x15, x15, x12							// nbytesleft = decend0 - decptr[0]
		subs	xzr, x15, #15
		sub		x2, x6, x9								// in1 - in2
		b.ls	.L1										// -> return true
.L2:
		subs	xzr, x2, #8
		b.ls	.L1										// -> return true
.L3:
		sub		x15, x15, #15
		sub		x6, x6, #8
		sub		x12, x12, #3
		.align	4
.L4: // Main decode loop body
		ldr		x13, [x3]								// refill 0 next
		ldr		x14, [x6]								// refill 1 next
		ldr		x2, [x9]								// refill 2 next
		subs	x15, x15, #15							// (nbytesleft -= TRIPLE_DECS_PER_REFILL) > 0
		prfum	#16, [x12, #67]							// out 0 prefetch
		lslv	x13, x13, x5							// refill 0 align
		rev		x14, x14								// refill 1 next byte reverse
		lslv	x2, x2, x11								// refill 2 align
		orr		x4, x4, x13								// refill 0 insert
		ubfm	x13, x5, #3, #5							// refill 0 7-bytes_consumed
		lslv	x14, x14, x8							// refill 1 align
		orr		x10, x10, x2							// refill 2 insert
		sub		x3, x3, x13								// refill 0 advance 1
		orr		x7, x7, x14								// refill 1 insert
		ubfm	x14, x8, #3, #5							// refill 1 7-bytes_consumed
		ubfm	x13, x4, #63, #10						// decode 0 tab addr
		ldrh	w13, [x13, x1]							// decode 0 LUT
		ubfm	x2, x11, #3, #5							// refill 2 7-bytes_consumed
		add		x6, x6, x14								// refill 1 advance 1
		ubfm	x14, x7, #63, #10						// decode 1 tab addr
		orr		x5, x5, #56								// refill 0 new bitcount
		ldrh	w14, [x14, x1]							// decode 1 LUT
		sub		x9, x9, x2								// refill 2 advance 1
		ubfm	x2, x10, #63, #10						// decode 2 tab addr
		orr		x8, x8, #56								// refill 1 new bitcount
		orr		x11, x11, #56							// refill 2 new bitcount
		ldrh	w2, [x2, x1]							// decode 2 LUT
		add		x3, x3, #7								// refill 0 advance 2
		add		x9, x9, #7								// refill 2 advance 2
		sub		x6, x6, #7								// refill 1 advance 2
		ccmp	x3, x9, #2, gt							// && in0 <= in2
		prfum	#1, [x6, #-64]							// refill 1 prefetch
		prfum	#1, [x3, #71]							// refill 0 prefetch
		prfum	#1, [x9, #71]							// refill 2 prefetch
		lsrv	x4, x4, x13								// decode 0 consume bits
		sub		x5, x5, x13								// decode 0 update bitc
		rev16	w13, w13								// out 0 sym->low byte
		ccmp	x9, x6, #2, ls							// && in2 <= in1
		lsrv	x7, x7, x14								// decode 1 consume bits
		sub		x8, x8, x14								// decode 1 update bitc
		lsrv	x10, x10, x2							// decode 2 consume bits
		sturh	w2, [x12, #4]							// out 0 emit2
		sturh	w14, [x12, #3]							// out 0 emit1
		ubfm	x14, x7, #63, #10						// decode 1 tab addr
		sub		x11, x11, x2							// decode 2 update bitc
		ldrh	w14, [x14, x1]							// decode 1 LUT
		strb	w13, [x12, #3]							// out 0 emit0
		ubfm	x13, x4, #63, #10						// decode 0 tab addr
		ubfm	x2, x10, #63, #10						// decode 2 tab addr
		ldrh	w13, [x13, x1]							// decode 0 LUT
		ldrh	w2, [x2, x1]							// decode 2 LUT
		lsrv	x7, x7, x14								// decode 1 consume bits
		sub		x8, x8, x14								// decode 1 update bitc
		lsrv	x4, x4, x13								// decode 0 consume bits
		sub		x5, x5, x13								// decode 0 update bitc
		rev16	w13, w13								// out 0 sym->low byte
		lsrv	x10, x10, x2							// decode 2 consume bits
		sturh	w2, [x12, #7]							// out 0 emit2
		sturh	w14, [x12, #6]							// out 0 emit1
		strb	w13, [x12, #6]							// out 0 emit0
		ubfm	x13, x4, #63, #10						// decode 0 tab addr
		ubfm	x14, x7, #63, #10						// decode 1 tab addr
		sub		x11, x11, x2							// decode 2 update bitc
		ubfm	x2, x10, #63, #10						// decode 2 tab addr
		ldrh	w13, [x13, x1]							// decode 0 LUT
		ldrh	w14, [x14, x1]							// decode 1 LUT
		ldrh	w2, [x2, x1]							// decode 2 LUT
		lsrv	x4, x4, x13								// decode 0 consume bits
		sub		x5, x5, x13								// decode 0 update bitc
		rev16	w13, w13								// out 0 sym->low byte
		lsrv	x7, x7, x14								// decode 1 consume bits
		sturh	w2, [x12, #10]							// out 0 emit2
		sturh	w14, [x12, #9]							// out 0 emit1
		strb	w13, [x12, #9]							// out 0 emit0
		ubfm	x13, x4, #63, #10						// decode 0 tab addr
		lsrv	x10, x10, x2							// decode 2 consume bits
		sub		x8, x8, x14								// decode 1 update bitc
		sub		x11, x11, x2							// decode 2 update bitc
		ldrh	w13, [x13, x1]							// decode 0 LUT
		ubfm	x14, x7, #63, #10						// decode 1 tab addr
		ubfm	x2, x10, #63, #10						// decode 2 tab addr
		ldrh	w14, [x14, x1]							// decode 1 LUT
		ldrh	w2, [x2, x1]							// decode 2 LUT
		lsrv	x4, x4, x13								// decode 0 consume bits
		sub		x5, x5, x13								// decode 0 update bitc
		rev16	w13, w13								// out 0 sym->low byte
		sturh	w2, [x12, #13]							// out 0 emit2
		sturh	w14, [x12, #12]							// out 0 emit1
		lsrv	x7, x7, x14								// decode 1 consume bits
		lsrv	x10, x10, x2							// decode 2 consume bits
		sub		x8, x8, x14								// decode 1 update bitc
		sub		x11, x11, x2							// decode 2 update bitc
		strb	w13, [x12, #12]							// out 0 emit0
		ubfm	x13, x4, #63, #10						// decode 0 tab addr
		ubfm	x14, x7, #63, #10						// decode 1 tab addr
		ubfm	x2, x10, #63, #10						// decode 2 tab addr
		ldrh	w13, [x13, x1]							// decode 0 LUT
		ldrh	w14, [x14, x1]							// decode 1 LUT
		ldrh	w2, [x2, x1]							// decode 2 LUT
		lsrv	x4, x4, x13								// decode 0 consume bits
		sub		x5, x5, x13								// decode 0 update bitc
		rev16	w13, w13								// out 0 sym->low byte
		sturh	w2, [x12, #16]							// out 0 emit2
		sturh	w14, [x12, #15]							// out 0 emit1
		lsrv	x7, x7, x14								// decode 1 consume bits
		strb	w13, [x12, #15]!						// out 0 emit0
		sub		x8, x8, x14								// decode 1 update bitc
		lsrv	x10, x10, x2							// decode 2 consume bits
		sub		x11, x11, x2							// decode 2 update bitc
		b.ls	.L4										// -> Main decode loop body
.L5: // Post-decode
		ubfm	x2, x5, #3, #5							// finish 0 remaining bytes
		add		x6, x6, #8
		add		x12, x12, #3
		and		x5, x5, #7								// finish 0 leftover bitc
		sub		x3, x3, x2								// finish 0 backtrack
		ubfm	x2, x8, #3, #5							// finish 1 remaining bytes
		and		x8, x8, #7								// finish 1 leftover bitc
		str		x12, [x0]
		add		x6, x6, x2								// finish 1 backtrack
		ubfm	x2, x11, #3, #5							// finish 2 remaining bytes
		and		x11, x11, #7							// finish 2 leftover bitc
		sub		x9, x9, x2								// finish 2 backtrack
		stp		x3, x6, [x0, #48]						// in0/in1
		str		x9, [x0, #64]							// in2
		stp		w4, w7, [x0, #96]						// bits0/bits1
		str		w10, [x0, #104]							// bits2
		stp		w5, w8, [x0, #120]						// bitc0/bitc1
		str		w11, [x0, #128]							// bitc2
.L1: // return true
		mov		x0, #1									// return val=true
		ret		
		FUNCTION_POST_DECL(oodle_newLZ_huff3_a64_kern)
		.cfi_endproc
